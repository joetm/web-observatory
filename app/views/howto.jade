extends main

block content
    :markdown
        This tutorial is at a preliminary stage. Please send your feedbacks (concrete comments and possible solutions) to [Issues](https://github.com/xgfd/web-observatory-issues/issues).

        ##Table of Contents
        1. [New users](#user)
        2. [Browse datasets and visualisations](#browse)
        3. [Register datasets and visualisations](#reg)
        4. [Query datasets](#query)
        5. [Query API](#api)




    .panel-default.panel
        .panel-heading
            .panel-title
                a(data-toggle='collapse' href='#user') New users
        #user.panel-collapse.collapse.in
            .panel-body
                :markdown
                   Although you can anonymously browse datasets and visualisations, more functionalities will be available after logging in. Two types of accounts are accepted by this site, a Web Observatory account (wo account), or a Southampton University account (su account). An wo account can be created at the [signup page](/signup). 
                       
                    You can login using either account at the [sign in page](/login), by choosing the desired login button. For wo account login, the username is your email. For su account login the username is your university username (without *@soton.ac.uk* part), and the password is your university password (not ecs password). The first time you login using your su account, a wo account will be automatically created. This account will use your university email as the username, and a password reset is required the first time you use it.
    .panel-default.panel
        .panel-heading
            .panel-title
                a(data-toggle='collapse' href='#browse') Browse datasets and visualisations
        #browse.panel-collapse.collapse.in
            .panel-body
                :markdown
                    Datasets and visualisations registered on this site can be browsed at either [Datasets](/wo/dataset) and [Visualisations](/wo/visualisation) respectively. The default view shows a table of entries with basic information (metadata). You can specify how many entries are shown per page, filter entires using the search box, and reorder entires by clicking the title of a column. A detailed information panel along with additional buttons will show after clicking the name of an entry. Function of these buttons will be described in section [Query datasets](#query).
                    
                    Each entry on this site has a uniques identifier (e.g. [DBpedia](/wo/dataset#52e19220bef627683c79c3a6) `/wo/dataset#52e19220bef627683c79c3a6`). These identifiers are resolvable and will give detailed metadata of the entry, as if you've clicked the name of the entry. The segment part (i.e. the string after #) is the ID of this entry, which is required to used the [Query API](#api).

    .panel-default.panel
        .panel-heading
            .panel-title
                a(data-toggle='collapse' href='#reg') Register datasets and visualisations
        #reg.panel-collapse.collapse.in
            .panel-body
                :markdown
                    You are more than welcome to register your datasets and visualisations on this site, which can be doen by clicking the *Add* button at either [Datasets](/wo/dataset) or [Visualisations](/wo/visualisation). You will have to provide basic metadata, such as name, URL, publisher (you), creator etc. as well as access control options at the bottom. For datasets, you have to provide username and password of datasets where applicable. In addition you need to test whether the URL, username and password you provided are valid.

    .panel-default.panel
        .panel-heading
            .panel-title
                a(data-toggle='collapse' href='#query') Query datasets
        #query.panel-collapse.collapse.in
            .panel-body
                :markdown
                    Once you logged in, you can query a dataset that you have permission to access (i.e. either publich datasets or the publisher has granted you permission). An *Explore* button will become available on top of the detail panel of the dataset. Clicking that button will show a query panel below the detail panel. Currently supported datasets/query languages are SPARQL, MongoDB and MySQL. 

    .panel-default.panel
        .panel-heading
            .panel-title
                a(data-toggle='collapse' href='#api') Query API
        #api.panel-collapse.collapse.in
            .panel-body
                :markdown
                        This section provides an overview of how to use the Web Observatory API. For API specification, please follow the link in the footer.

                        The Web Observatory API currently supports client side javascript and Nodejs. API written in python will be released soon.

                        

                        ### Installation



                        Download the API file wo.js from [https://github.com/webobservatory/wo-api-js](https://github.com/webobservatory/wo-api-js) 

                        and include in your html file:
                        ```
                        <script type="text/javascript" charset="utf-8" src="path/to/wo.js"> </script>
                        ```
                        Please note, due to local file security policy, your application needs to be served by a web server in order for it to work. Simply open your html as a local file in a browser would not work (or follow [this guide](https://github.com/mrdoob/three.js/wiki/How-to-run-things-locally#change-local-files-security-policy) for a work around).  

                        ###Usage

                        **Create a new WO client:**
                        ```
                        var client = new WO("webobservatory.soton.ac.uk", "client_id"); 
                        ```
                        *client_id: This is your application ID in your WO profile.  (You need to create an application if you don’t already have one. )*

                        **Login**
                        ```
                        client.login()
                        ```
                        You would normally assign this action to a button click:

                        Create a button in html: 
                        ```
                        <button href="#" id='authButton' >Connect</button>
                        ```
                        then assign the click action to the login function:
                        ```
                        document.getElementById("authButton").addEventListener("click",client.login);
                        ```
                        or 
                        ```
                        //jQuery
                        $('#authButton').click(client.login);
                        ```
                        Clicking the button would redirect the user of your application to the WO login page and ask the user to authorise your application for accessing the data on their behalf. 

                        **Querying static dataset**

                        Quering a mongodb's tweets collection with an empty query {}
                        ```
                        var opt =
                        {
                          collection: "tweets", //mongodb collection name, required
                          query: "{}", //mongodb query, required
                          limit: 20, //query modifier, optional
                          skip: 0 //query modifier, optional
                        };
                        var id = ‘548047c832582f2c45520ce7’; //dataset_id, ebola mongodb
                        client.query(id, opt, function(err, data) {
                        if(!err)
                             console.log(data);
                        });
                        ```
                        *Note: dataset_id can be obtained from the URL of detail information page, the string after #).*

                        **Accessing live stream dataset:**
                        ```
                        //open the AMQP dataset ‘54eb13d7590ea23530f24645’
                        //with the exchange name ‘logs’
                        //display the first chunk of the stream and close it
                        client.openStream(‘54eb13d7590ea23530f24645’, {query: ‘logs’},
                        function(err, data, stream) {
                        if(!err) {
                        console.log(data);
                        //close all streams from
                        //dataset ‘54eb13d7590ea23530f24645’
                        client.closeStream(‘54eb13d7590ea23530f24645’);
                        //or you can close this stream only
                        client.closeStream(stream.id);
                        }});
                        ```
                        **Listing the existing open stream connections:**
                        ```
                        //list all stream that are connected to ‘54eb13d7590ea23530f24645’
                        var opStreams = client.listStream(‘54eb13d7590ea23530f24645’);
                        //list all stream
                        var opStreams = client.listStream();
                        ```
                        **Close Stream connections:**
                        ```
                        //close the listed streams
                        //same as client.closeStream(‘54eb13d7590ea23530f24645’) in this specific case
                        opStreams.forEach(function(sid) {
                        client.closeStream(sid);
                        });
                        ```



